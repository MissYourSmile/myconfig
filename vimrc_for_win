" ----------------
" windows gvim basesetting
" ----------------
set guioptions-=T
set guioptions-=m
set guioptions-=l
set guioptions-=r
set guioptions-=L
set guioptions-=R
set guifont=SauceCodePro\ NF:h12
set guicursor+=a:blinkon0
set lines=70
set columns=120
" ----------------
" base setting
" ----------------
syntax enable
syntax on

filetype on
filetype plugin on
filetype indent on
filetype plugin indent on

set number
set relativenumber
set showmode
set showcmd
set expandtab
set smarttab
set autoindent
set mouse=a
set nobackup
set noswapfile
set encoding=utf-8
set hlsearch
exec "nohlsearch"
set ignorecase
set smartcase
set wildmenu
set backspace=2
set colorcolumn=81
highlight ColorColumn ctermbg=cyan

set tabstop=4
set softtabstop=4
set shiftwidth=4
autocmd FileType html,xml,css set tabstop=2
autocmd FileType html,xml,css set softtabstop=2
autocmd FileType html,xml,css set shiftwidth=2

" ----------------
" map
" ----------------
let mapleader = "\<space>"
map s <nop>
map Q :q<CR>
map S :w<CR>
map R :source $MYVIMRC<CR>
nmap <leader><CR> :nohlsearch<CR>

map sl :set splitright<CR>:vsplit<CR>
map sh :set nosplitright<CR>:vsplit<CR>
map sj :set splitbelow<CR>:split<CR>
map sk :set nosplitright<CR>:split<CR>

map fl :bn<CR>
map fh :bp<CR>
map fd :bd<CR>

map <leader>h <C-w>h
map <leader>j <C-w>j
map <leader>k <C-w>k
map <leader>l <C-w>l

map <up> :res +5<CR>
map <down> :res -5<CR>
map <left> :vertical resize-5<CR>
map <right> :vertical resize+5<CR>

map tn :tabe<CR>
map th :-tabnext<CR>
map tl :+tabnext<CR>

map <leader>nt :NERDTreeToggle<CR>
"map <leader>un :UndotreeToggle<CR>
map <F8> :Tlist<CR>
noremap <a-cr> <esc>:call libcallnr('vimfullscreen.dll', 'ToggleFullscreen', 0)<cr>

" ----------------
" vim plug
" ----------------
if empty(glob('$HOME/vimfiles/autoload/plug.vim'))
  silent execute '!curl -fLo $HOME/vimfiles/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('$HOME/vimfiles/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jiangmiao/auto-pairs'
Plug 'preservim/nerdtree'
"Plug 'vim-scripts/taglist.vim'
"Plug 'vim-scripts/minibufexplorerpp'

"Plug 'SirVer/ultisnips'
"Plug 'MissYourSmile/vim-snippets'
Plug 'preservim/nerdcommenter'

Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'

"Plug 'mbbill/undotree'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/Mark--Karkat'
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-surround'

call plug#end()

"""""""""""""""
" coc.nvim
"""""""""""""""
let g:coc_disable_startup_warning = 1
let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-vimlsp',
    \ 'coc-clangd',
    \ 'coc-python']

set hidden
set updatetime=300
set shortmess+=c

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

nmap <leader>rn <Plug>(coc-rename)
xmap <leader>t  <Plug>(coc-format-selected)
nmap <leader>t  <Plug>(coc-format-selected)

" taglist
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Use_Right_Window=1
let Tlist_Sort_Type="name"

" ultisnips
let g:UltiSnipsExpandTrigger="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" airline
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = ' '
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>0 <Plug>AirlineSelectTab0

" LeaderF
let g:Lf_WindowPosition = 'popup'
let g:Lf_ShowDevIcons = 1
let g:Lf_DevIconsFont = "SauceCodePro NF"
set ambiwidth=double

" markdown
let g:vim_markdown_folding_disabled = 1

" gruvbox colorcolumn
colorscheme gruvbox

"============================
" Auto add file head
"============================
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.rb,*.java,*.py exec ":call SetTitle()"

func SetTitle()
    if &filetype == 'sh'
        call setline(1,"\#!/bin/bash")
        call append(line("."), "")
    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python3")
        call append(line("."),"# coding=utf-8")
        call append(line(".")+1, "")
    else
        call setline(1, "/*")
        call append(line("."), " * ".expand("%"))
        call append(line(".")+1, " */")
        call append(line(".")+2, "")
    endif
    if expand("%:e") == 'cpp'
        call append(line(".")+3, "#include<iostream>")
        call append(line(".")+4, "using namespace std;")
        call append(line(".")+5, "")
    endif
    if &filetype == 'c'
        call append(line(".")+3, "#include<stdio.h>")
        call append(line(".")+4, "")
    endif
    if expand("%:e") == 'h'
        call append(line(".")+3, "#ifndef _".toupper(expand("%:r"))."_H")
        call append(line(".")+4, "#define _".toupper(expand("%:r"))."_H")
        call append(line(".")+5, "#endif")
    endif
    if &filetype == 'java'
        call append(line(".")+1,"public class ".expand("%:r"))
        call append(line(".")+2,"")
    endif
endfunc
autocmd BufNewFile * normal G

